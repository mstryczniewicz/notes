v             visual mode
Shift-v       line visual mode
Ctrl-v        block visual mode

in visual mode:
o             move to the other end of marked area
u             change marked text to lowecase
U             change marked text to uppercase

:sp/:split    open a new horizontal split
:vs/:vsplit   open a new vertical split
:tabnew       open a new tab
:e            open a file in current tab
:Ex           browse present directory
:w            write selection to file (in visual mode)
:r !cmd       execute and insert results of 'cmd'
:!cmd         execute command 'cmd'

H             move to the highest displayed line
M             move to the middle displayed line
L             move to the lowest displayed line

J             merge line below to the current one with space in between
gJ            merge line below to the current one with no space in between

50%           move to 50% of the document
:#            jump to line #
#G / #gg      jump to line # (line numbering needs to be enabled)

f<char>       jump to first found <char> in line (f stands for 'find')
F<char>       jump to latest found <char> in line (backwards)
t<char>       jump to first found <char> in line, just before it (t stands for 'to')
T<char>       jump to latest found <char> in line, just after it
;             repeat the last char search forwards
,             repeat the last char search backwards

*             jump to next instance of the current word
#             jump to previous instance of the current word

~             flip case of text selected in visual mode
=             re-indent the selected text (e.g. in visual mode)
==            re-indent the current line
gg=G          re-indent the entire buffer

ciw           change entire word
cit           change inside xml/html tags: <tag>sometext</tag>
vip           select the whole paragraph in visual mode

ci[           change inside square brackets (i stands for 'inside')
ca[           change inside square brackets, including brackets (a stands for 'around')

>ib           indent inside parentheses ()
>iB           indent inside braces {}

%             jump to a matching parenthesis
.             repeat the previous editing command

:!command     run a single shell command without leaving vi
:r!command    run a command and insert its output right after cursor

Ctrl-o        move to older position
Ctrl-i        move to newer position
Ctrl-r        paste in insert mode (need to pick register)

registers:
:reg          show content of registers
"xy           yank into register x
"xp           paste contents of register x
"*p           paste contents from system clipboard

special registers:
0 - last yank
" - unnamed register, last delete or yank
% - current file name
# - alternate file name
* - clipboard contents (X11 primary)
+ - clipboard contents (X11 clipboard)
/ - last search pattern
: - last command-line
. - last inserted text
- - last small (less than a line) delete
= - expression register
_ - black hole register

:marks        show bookmarks

:let          list all variables and their values, except env vars
:let g:       list vars of a particular type (in this case g for global)
types of variables (the letter is a prefix):
g:  global variables
b:  local buffer variables
w:  local window variables
t:  local tab page variables
s:  script-local variables
l:  local function variables
v:  Vim variables

:redir @a     redirect output of subsequent command(s) to register a
:let
:redir END    finish output redirection
"ap           paste contents of register a

set list      show whitespace
set unlist    hide whitespace
set list!     toggle 'set list'

]p            paste and adjust indent to current line
:%retab!      retab the whole file
:so ~/.vimrc  source vim config

:verbose set ts? et?    check values of ts and et
:scriptnames            list all sourced scripts in order loaded
:help up-down-motions   help on movement commands
:help matchpairs        how to define matchpairs (% jumps between them)
:help packages          help on built-in vim package management
:help startup           what happens at vim startup
:help runtimepath       dirs where runtime files and plugins are loaded from
:help vim-arguments     vim startup arguments
:help startup-options   vim startup options
:help matchit           help on built-in matchit plugin functionality
:version                print version and build information
:echo $VAR              check value of an env var

:sav              save file under a new name and switch to the new copy
:w !sudo tee %    write out the file using sudo and tee command (% is filename?)
                    useful when file was opened as read only

:e            open a file in a new buffer
:bn           move to the next buffer
:bp           move to the previous buffer
:bd           close buffer
:b#           move to the specified buffer (by number)
:b filename   move to the specified buffer (by filename)
:ls           list all open buffers
:tab ba       edit all buffers as tabs

qa            record macro a
q             stop recording macro
@a            run macro a
@@            run last macro again

search and replace across multiple files (https://nithinbekal.com/posts/vim-search-replace)
:grep original_string
:cfdo %s/original_string/new_string/g | write

q:            show command history

